System.setIn(new FileInputStream("src/SDS.SDS_day1/P1713/input.txt"));

클래스는 메인 클래스 밖에

BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
String line = bf.readLine();
StringTokenizer st = new StringTokenizer(line," ");

Arrays.sort(list);
Collections.sort(list);
Collections.sort(list, Comparator.reverseOrder());
Arrays.fill(list,~~);

총 개수를 모르거나 정렬해야할때
ArrayList는 검색에 특화, LinkedList는 추가/삭제에 특화
List<Integer> A = new ArrayList<>();
List<Integer> A = new LinkedList<>();
Queue<Integer> A = new LinkedList<>();
PriorityQueue<Integer> A = new PriorityQueue<>();
Stack<Integer> A = new Stack<>();
Set<Integer> A = new HashSet<>();
HashMap<Integer, String> A = new HashMap<>();        // A.put, A.replace, get, containsKey, containsValue


배열로 선언할 때, 다시 for문을 돌려서 각각의 원소를 ArrayList로 초기화해야한다.
배열 선언 후 필요할 때 배열 내 값을 list에 넣기
ArrayList<Integer>[] adj = new ArrayList[N];

ArrayList 중복 개수 확인 -> Collections.frequency(list, value)

Set과 List의 차이
Set은 contain이 O(1), List는 O(N)
Set은 중복이 안되고 List는 중복이 된다
Set은 순서를 저장하지 않고 List는 순서를 저장한다.

Queue method들
예외 발생  | false 리턴
   add   |   offer
  remove |   poll
 element |   peek

HashSet -> Array
B = A.toArray(new Integer[0]);  //0으로 배열 크기 자동 지정, 이 때 B는 int가 아닌 Integer로 선언
Array -> HashSet
A = new HashSet<Integer>(Arrays.asList(B));


int로 했는데 안되면 long
int - 2123456789
long - 9123456789123456789


top부터 하나하나 꺼내는 상황엔 PriorityQueue
PriorityQueue<jewel> pq = new PriorityQueue<>();
pq.peek() -> 맨 위 확인만 함
pq.poll() -> 맨 위 확인하고 빼버림

Comparator.comparingInt(jewel::getValue)
Comparator.comparingInt(jewel::getValue).reversed() -> Arrays.sort나 PriorityQueue에서 사용할 수 있다.

내부합을 구할 땐 원래 누적합 배열을 쓰는데
(1차 배열 2개일 때 2차 배열을 선언하여 [i-1][j-1]이 i~j까지의 합을 나타냄을 표시) https://yiyj1030.tistory.com/489
배열의 순서가 바뀔 떈 인덱스 트리를 활용한다.

&, | 비트연산자
1 << i , i >> 1 비트연산자 

log2(N) = log(N)/log(2)
depthbase는 0, k는 log2(N)+1 --> log(N)/log(2)

바이트 연산자 &,|,~(not),^(xor), <<, >>
0xFF로 32진수의 1111...1111을 나타낼 수 있다
Integer.toBinaryString과 Integer.parseInt(,2)로 string과 int값 사이의 변환이 가능하다.
sub_set & (1 << n)) == Math.pow(2, n) ? true : false // n위치에 존재하는가?

System.out.println보다는
StringBuilder sb = new StringBuilder();
sb.append("~~"+"\n");
System.out.println(sb);

소수점 자리수 표기
System.out.printf("%.3f", num);
Math.round(num*1000)/1000

String.format("%.4f", num);
--> 이거로 진행하면 println으로 작성 가능하기 떄문에 문자열에 %가 들어가도 printf에서 걸러지는 일이 없다.


Collections Sort에서 ArrayList는 non primitive type으로 merge sort를 사용해 시간이 오래 걸린다
단순 Array를 사용하여 primitive type array를 Arrays.sort를 할 경우 dual pivot sort로 히트율이 높아 더 빠르게 소팅이 가능하다

지수 연산을 logN으로 하는 방법 : 지수를 2진수로 나타내서 7^1 7^2 7^4... 의 조합으로 원래 N번 곱할 일을 줄일 수 있다.

P9663
table에서 대각선에 있는 정점은 열-열, 행-행의 절대값은 같다 (3,3) (4,2) => 1, 1
각y줄에 하나밖에 안들어가는 상황엔 x만 신경쓰면 된다.

2143 헷갈림, count를 long으로 했어야 함

2504 스택 문제, 다 끝나고 곱하는게 아니라 미리 value를 정해서 더하는 값에 미리 곱하여 총 값에 넣음

